@model crucibleBlog.Models.BlogPost

@using crucibleBlog.Enums;
@using crucibleBlog.Services.Interfaces;

@inject IImageService _ImageService
@inject IBlogService _BlogService


@{
    ViewData["Title"] = "Edit";
}

<h4>BlogPost</h4>
<hr />
<main class="container mt-5">
<form asp-action="Edit" enctype="multipart/form-data" method="post">
    <input type="hidden" asp-for="ImageData" />
    <input type="hidden" asp-for="ImageType" />
    <input type="hidden" asp-for="Id" />
    <input type="hidden" asp-for="CreatedDate" />
    <input type="hidden" asp-for="UpdatedDate" />

    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
		<div class="row">
			<div class="col-12 col-lg-4">
				<div class="form-group">
					<label asp-for="ImageFile" class="control-label">Blog Post Image</label> <img class="img-fluid border rounded-3 mb-2" style="max-height: 350px;" src="@_ImageService.ConvertByteArrayToFile(Model.ImageData!,Model.ImageType!,(int)DefaultImage.BlogPostImage)" id="blogImage"> <input asp-for="ImageFile" type="file" class="form-control mt-3 pt-2" accept=".png,.jpg,.jpeg,.gif" onchange="document.getElementById('blogImage').src = window.URL.createObjectURL(this.files[0])" />
				</div>
				<div class="form-group">
					<label asp-for="Title" class="control-label"></label> <input asp-for="Title" class="form-control" /> <span asp-validation-for="Title" class="text-danger"></span>
				</div>
				<div class="form-group">
					<label asp-for="Abstract" class="control-label"></label> <textarea asp-for="Abstract" class="form-control" rows="1"></textarea> <span asp-validation-for="Abstract" class="text-danger"></span>
				</div>
				<div class="form-group">
					<label asp-for="CategoryId" class="control-label">Category</label> <select asp-for="CategoryId" class="form-control" asp-items="ViewBag.CategoryId"></select>
				</div>
			</div>
			<div class="col-12 col-lg-8">
				<div class="form-group"> <label asp-for="Content" class="control-label"></label> <textarea asp-for="Content" class="editor form-control"></textarea> <span asp-validation-for="Content" class="text-danger"></span> </div> <div class="form-group" id="tagContainer">
					<label asp-for="Tags"></label> <input class="form-control" type="text" id="tagInput" name="StringTags" autocomplete="off" /> <div class="tagcloud axil-single-widget mt-2" style="display:none">
						@foreach (Tag tag in await _BlogService.GetTagsAsync())
						{
							<a onclick="addTag(this)">@tag.Name</a>
						}
					</div>
				</div>

				<div class="form-group d-flex justify-content-end">
					<label class="form-check-label me-4 mt-2" asp-for="IsPublished">Publish?</label>
					<input class="largerCheckbox me-4" type="checkbox" asp-for="IsPublished" />
					<span asp-validation-for="IsPublished" class="text-danger"></span>
				</div>
				<div class="form-group d-flex justify-content-end">
					<label class="form-check-label me-4 mt-2" asp-for="IsDeleted">Delete?</label>
					<input class="largerCheckbox me-4" type="checkbox" asp-for="IsDeleted" />
					<span asp-validation-for="IsDeleted" class="text-danger"></span>
				</div>
				<div class="form-group d-flex justify-content-end">
					<input type="submit" value="Update" class="btn btn-primary" />
				</div>
		</div>
	</div>
<div>
    <a asp-action="Index">Back to List</a>
</div>
    </form>
</main>

@section scripts{
	@{
		await Html.RenderPartialAsync("_ValidationScriptsPartial");
	}
	<!--CK Editor-->
	<script src="https://cdn.ckeditor.com/ckeditor5/37.1.0/classic/ckeditor.js"></script>
	<script>
		ClassicEditor
			.create(document.querySelector('#editor'), {
				licenseKey: '',
			})
			.then(editor => {
				window.editor = editor;
			});;
	</script>


<script>
	$(document).ready(function () {
		document.getElementById('tagInput').addEventListener('focus', () => {

		})

		$('#tagInput').focus(function () {
			$('.tagcloud').show(300);
		});

		$('form *:not("#tagInput")').focus(function () {
			if ($('.tagcloud').is(':visible')) {
				$('.tagcloud').hide(300);
			}
		})

		$('#tagInput').keyup(function () {

			$('.disabledTag').each(function () {
				$(this).removeClass('disabledTag')
			})

			//get the text they're searching with
			let inputText = $('#tagInput').val();
			let inputTags = inputText.split(',');
			let searchString = inputTags.pop().trim();

			//hide all the tags that dont contain that text
			$('.tagcloud > a:contains(' + searchString + ')').show();
			$('.tagcloud > a:not( :contains(' + searchString + ') )').hide();

			inputTags.forEach(tag => {
				if (tag.trim() == '') return;

				let tagElement = $('.tagcloud > a:contains(' + tag.trim() + ')');

				if (tagElement.text().trim().toLowerCase() == tag.trim().toLowerCase()) {
					tagElement.addClass('disabledTag');
				}
			})
		});

	});
	function addTag(tagElement) {
		let input = document.getElementById('tagInput');

		if (tagElement.classlist.contains('disabledTag')) {
			input.focus();
			return;
		}

		let tagName = tagElement.textContent + ', ';

		let currentTags = input.value.split(',');

		currentTags.pop();
		currentTags.push(tagName);

		input.value = currentTags.reduce((inputString, currentString) => inputString + ", " + currentString.trim());

		input.focus();

		$('.tagcloud > a').show();
		tagElement.classList.add('disabledTag');
	}
</script>
}