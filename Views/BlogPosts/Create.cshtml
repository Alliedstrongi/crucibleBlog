@model crucibleBlog.Models.BlogPost

@using crucibleBlog.Enums;
@using crucibleBlog.Services.Interfaces;

@inject IImageService _ImageService
@inject IBlogService _BlogService

@{
	ViewData["Title"] = "Create";
}

<style>
	.ck-editor__editable_inline {
		min-height: 300px;
	}

	input.largerCheckbox {
		width: 30px;
		height: 30px;
	}

	label.form-check-label {
		font-size: 22px;
	}
</style>

<main class="container mt-5">
	<form asp-action="Create" enctype="multipart/form-data">
		<div asp-validation-summary="ModelOnly" class="text-danger"></div>
		<div class="row">
			<div class="col-12 col-lg-4">
				<div class="form-group">
					<label asp-for="Title" class="control-label"></label>
					<input asp-for="Title" class="form-control" />
					<span asp-validation-for="Title" class="text-danger"></span>
				</div>
				<div class="form-group">
					<label asp-for="Abstract" class="control-label"></label>
					<textarea asp-for="Abstract" class="form-control" rows="1"></textarea>
					<span asp-validation-for="Abstract" class="text-danger"></span>
				</div>
				<div class="form-group">
					<label asp-for="CategoryId" class="control-label">Category</label>
					<select asp-for="CategoryId" class="form-control" asp-items="ViewBag.CategoryId"></select>
				</div>
				<div class="form-group">
					<label asp-for="ImageFile" class="control-label">Blog Post Image</label>
					<img class="img-fluid border rounded-3 m-2" style="max-height: 250px;"
						 src="@_ImageService.ConvertByteArrayToFile(Model.ImageData,Model.ImageType,(int)DefaultImage.BlogPostImage)" id="blogImage">
					<input asp-for="ImageFile" type="file" class="form-control mt-3 pt-2" accept=".png,.jpg,.jpeg,.gif"
		 onchange="document.getElementById('blogImage').src = window.URL.createObjectURL(this.files[0])" />
				</div>
			</div>
			<div class="col-12 col-lg-8">
				<div class="form-group" id="editor">
					<label asp-for="Content" class="control-label"></label>
					<textarea asp-for="Content" class="editor form-control"></textarea>
					<span asp-validation-for="Content" class="text-danger"></span>
				</div>	
				<div class="form-group" id="tagContainer">
					<label asp-for="Tags"></label>
					<input class="form-control" type="text" id="tagInput" name="StringTags" autocomplete="off" />
				</div>
			</div>
		</div>
		<div class="form-group d-flex justify-content-end mt-3">
			<div class="form-group form-check d-flex my-auto">
				<label class="form-check-label my-auto me-4">
					<input class="form-check-input me-3" asp-for="IsPublished" />&nbsp; Publish?
				</label>
			</div>
			<input type="submit" value="Create" class="btn btn-primary" />
		</div>
	</form>
	<div class="mt-5">
		<a asp-action="Index">Back to List</a>
	</div>
</main>

@section scripts{
	@{
		await Html.RenderPartialAsync("_ValidationScriptsPartial");
	}
	<!--CK Editor-->
	<script src="https://cdn.ckeditor.com/ckeditor5/37.1.0/classic/ckeditor.js"></script>
	<script>
		ClassicEditor
			.create(document.querySelector('#editor'), {
				licenseKey: '',
			})
			.then(editor => {
				window.editor = editor;
			});;
	</script>

	<script>
		$(document).ready(function () {
			document.getElementById('tagInput').addEventListener('focus', () => {

			})

			$('#tagInput').focus(function () {
				$('.tagcloud').show(300);
			});

			$('form *:not("#tagInput")').focus(function () {
				if ($('.tagcloud').is(':visible')) {
					$('.tagcloud').hide(300);
				}
			})

			$('#tagInput').keyup(function () {

				$('.disabledTag').each(function () {
					$(this).removeClass('disabledTag')
				})

				//get the text they're searching with
				let inputText = $('#tagInput').val();
				let inputTags = inputText.split(',');
				let searchString = inputTags.pop().trim();

				//hide all the tags that dont contain that text
				$('.tagcloud > a:contains(' + searchString + ')').show();
				$('.tagcloud > a:not( :contains(' + searchString + ') )').hide();

				inputTags.forEach(tag => {
					if (tag.trim() == '') return;

					let tagElement = $('.tagcloud > a:contains(' + tag.trim() + ')');

					if (tagElement.text().trim().toLowerCase() == tag.trim().toLowerCase()) {
						tagElement.addClass('disabledTag');
					}
				})
			});

		});
		function addTag(tagElement) {
			let input = document.getElementById('tagInput');

			if (tagElement.classlist.contains('disabledTag')) {
				input.focus();
				return;
			}

			let tagName = tagElement.textContent + ', ';

			let currentTags = input.value.split(',');

			currentTags.pop();
			currentTags.push(tagName);

			input.value = currentTags.reduce((inputString, currentString) => inputString + ", " + currentString.trim());

			input.focus();

			$('.tagcloud > a').show();
			tagElement.classList.add('disabledTag');
		}
	</script>
}